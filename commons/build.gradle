apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion rootProject.compileSdk
    buildToolsVersion rootProject.buildTools

    packagingOptions {
        exclude 'META-INF/atomicfu.kotlin_module'
    }

    defaultConfig {
        minSdkVersion rootProject.minSdk
        targetSdkVersion rootProject.targetSdk
        versionCode rootProject.versionCode
        versionName rootProject.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'

        buildConfigField("String", "SESSIONIZE_API_ENDPOINT", "\"https://sessionize.com/api/v2/jl4ktls0/view\"")
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    api 'androidx.core:core-ktx:1.1.0'

    // dagger
    api "com.google.dagger:dagger-android:$rootProject.dagger"
    api "com.google.dagger:dagger-android-support:$rootProject.dagger"
    kapt "com.google.dagger:dagger-compiler:$rootProject.dagger"
    kapt "com.google.dagger:dagger-android-processor:$rootProject.dagger"

    // navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$rootProject.navigation"
    implementation "androidx.navigation:navigation-ui-ktx:$rootProject.navigation"

    // lifecycle
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$rootProject.androidLifecycle"
    implementation "androidx.lifecycle:lifecycle-extensions:$rootProject.androidLifecycle"

    // network
    api 'com.squareup.retrofit2:retrofit:2.6.1'
    api 'com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:0.4.0'
    api 'com.squareup.okhttp3:logging-interceptor:4.2.1'

    // room
    api "androidx.room:room-runtime:$rootProject.roomDatabase"
    api "androidx.room:room-ktx:$rootProject.roomDatabase"
    kapt "androidx.room:room-compiler:$rootProject.roomDatabase"

    // arrow core
    implementation "io.arrow-kt:arrow-core:$rootProject.arrow"
    implementation "io.arrow-kt:arrow-syntax:$rootProject.arrow"
    kapt "io.arrow-kt:arrow-meta:$rootProject.arrow"

    // coroutines
    api 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.2'
    api 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.2'

    // moshi
    implementation("com.squareup.moshi:moshi-kotlin:1.9.1")

    // okhttp
    implementation("com.squareup.okhttp3:okhttp:4.2.2")

    // tests
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.2'
    testImplementation("com.squareup.okhttp3:mockwebserver:4.2.2")

    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation "androidx.room:room-testing:$rootProject.roomDatabase"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs = ["-XXLanguage:+InlineClasses"]
    }
}
